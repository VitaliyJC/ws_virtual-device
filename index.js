// virtual_device.js
import WebSocket from "ws";
import axios from "axios";

const token = process.argv[2]; // –¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç

let isRunning = true;
let intervalId = null;

if (!token) {
  console.error("‚ùå –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–∫–µ–Ω. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node virtual_device.js <token>");
  process.exit(1);
}

const WS_URL = `ws://ws_nginx/ws_socket?type=device&token=${token}`;
const API_URL = `http://ws_nginx/ws_api/telemetry`;

let deviceId = null;

const ws = new WebSocket(WS_URL);

ws.on("open", () => {
  console.log("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –ø–æ WebSocket");

  console.log("token ", token);
});

ws.on("message", (msg) => {
  const data = JSON.parse(msg);
  // console.log("data :", data);

  if (data.type === "welcome") {
    deviceId = data.deviceId;

    console.log("üì° –ü–æ–ª—É—á–µ–Ω deviceId:", deviceId);

    if (!deviceId) {
      console.error("‚ùå –ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞");
      process.exit(1);
    }

    // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —à–ª—ë–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
    intervalId = setInterval(async () => {
      if (!isRunning) return;
      const voltage = (3.0 + Math.random()).toFixed(2);
      const temperature = (20 + Math.random() * 10).toFixed(1);

      try {
        await axios.post(API_URL, {
          device_id: deviceId,
          voltage,
          temperature,
        });

        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${voltage} –í, ${temperature} ¬∞C`);
      } catch (err) {
        const status = err?.response?.status;
        const msg = err?.response?.data?.message || err.message;

        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏:", msg);

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ" ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if (status === 403 || msg.includes("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é")) {
          console.log("üö´ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–æ–ª–µ–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket.");
          isRunning = false;
          clearInterval(intervalId);
          ws.close();
          process.exit(0);
        }
      }
    }, 1000);
  }
});

ws.on("close", () => {
  console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á—ë–Ω");
  isRunning = false;
  clearInterval(intervalId);
});

ws.on("error", (err) => {
  console.error("üö® –û—à–∏–±–∫–∞ WebSocket:", err.message);
});
